package game

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
)

// Ascii art of the monsters
var GoblinArt string = `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⣴⣾⠃
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠚⣩⡾⠃⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠔⠋⠁⣠⣼⡗⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⢀⣰⠴⠚⠉⢀⣠⠔⢋⠾⠁⠀⠀⠀⠀
⠀⠀⣠⠔⠚⢦⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡠⠤⠴⠷⢶⣤⠀⠀⠀⠀⣀⡤⠞⠉⠀⢀⣤⠞⠉⠀⣰⡋⠀⠀⠀⠀⠀⠀
⠠⠮⢥⢤⡀⠀⠙⢶⣦⠀⢀⣀⡸⠖⠚⠉⠉⠉⢉⡟⡋⠁⠀⠀⠀⠀⠀⠈⠳⢶⣳⡞⠉⠀⠀⠀⣴⠟⠁⠀⠀⢀⣯⠀⠀⠀⠀⠀⠀⠀
⠀⠈⠀⠡⡱⣆⠀⠀⠙⢦⡼⠊⠀⠀⠀⠀⠀⠀⣼⠀⢷⡀⠀⢀⠀⠀⠀⢀⣠⢤⣟⠀⠀⠀⠀⣼⠃⠀⠀⠀⢺⠉⠙⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠉⡇⠈⢷⡀⠀⣸⠁⠀⠀⠀⠀⠀⠀⠀⠿⠀⠈⠁⠀⠘⣧⠀⡴⠋⠀⠀⠹⣆⠀⠀⢰⠃⠀⣤⣤⡀⣾⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠷⢤⠈⢻⠎⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⣾⠁⣀⣴⠤⠀⢹⡤⠴⣼⠀⠀⢈⡿⢿⠋⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣿⡄⢸⡐⠚⠷⣾⣻⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⢸⣷⣿⣿⣧⢠⠞⠀⠀⠀⠳⣤⠛⠀⠀⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢹⡇⠀⢷⠀⠀⢸⠉⢻⣽⣲⣤⣠⡗⠀⡴⢃⠞⢁⣠⣿⣿⣿⣟⣿⠆⠀⠀⠀⠀⠀⢻⡀⠀⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⡀⣎⣧⠖⠙⠀⢠⠞⠒⠼⣸⣿⣿⡷⠿⠷⠠⣤⡶⡽⣿⣿⣿⣿⣻⡿⢦⡀⠀⠀⠀⠀⠸⣗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢤⣹⡾⠁⠀⠀⠀⠀⠀⠀⠀⠀⢈⡟⠀⠀⠀⠀⠀⠑⣤⠉⠻⢭⠍⠅⠀⢈⣷⡀⠀⠀⠀⠀⣿⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠀⠀⠀⠀⠀⠀⠘⡇⠀⠀⠀⠀⠀⠈⢻⠁⠀⠀⠀⢠⢯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠘⠛⡆⠀⠀⠀⠀⠀⠀⠀⠀⠐⡇⠀⠀⠀⠀⠀⠀⠀⢠⣧⠤⣄⠀⠀⠀⠀⠉⠀⣠⠴⢶⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠈⠀⠑⢄⡀⠀⠀⠔⠋⢱⠀⡠⢷⡀⠀⠀⠀⠀⠀⠀⢸⠂⠀⢸⡇⠀⢀⣠⠔⠋⠁⢰⢻⠀⡸⠐⠀⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠄⠀⡜⠉⠓⡎⠀⠀⢸⠰⡅⠀⠙⢆⠀⠀⠀⠀⢠⠟⣠⠶⠋⢀⣴⣿⣿⡆⠀⠀⣾⢼⠁⠁⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠃⡈⣧⠀⠸⣄⡀⠀⣸⣤⣽⣖⣋⠉⠓⢦⡀⠀⡟⡴⠃⢠⣾⣿⣿⣿⣿⣧⢀⣼⣿⡟⠃⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠁⠈⢷⠄⣀⡩⠍⢩⠏⢩⡍⠉⠙⠲⣄⡙⠒⠚⣠⠞⡟⠉⠛⠻⣿⣿⣿⣿⣿⡿⣃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢷⣰⠀⠸⣆⣀⣧⠴⠚⠉⠉⠉⠙⠫⣅⡀⠃⠀⠀⠀⡄⠙⠻⠟⢻⡆⣇⠚⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⢸⠉⠙⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠶⣄⢀⡼⠁⠀⠀⣾⠀⢁⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢣⡀⠀⠀⠀⠀⢀⣀⣠⣄⣤⣠⣄⣀⠀⠉⠿⣅⣀⡀⣠⢏⣠⠎⠀⠀⠀⠀⠀⢀⠁⠸⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠹⠒⣶⡖⠛⠉⠁⠀⠃⠈⠈⠉⠉⠛⠲⣤⣄⣨⣽⠻⠉⠀⠄⠀⠀⠀⠀⠀⠨⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⠀⠉⣠⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`

var GooseArt string = `
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡶⠾⠛⠛⠛⣶⣄⠀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡶⠋⠁⠀⠀⠀⠀⠀⠀⠘⠛⠀⠈⠉⠛⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠞⠁⠀⠀⠀⠀⢰⡶⠟⣿⣶⣶⠿⢷⣤⣀⣤⣀⣽⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡏⠀⠀⠀⠀⠀⠀⠘⣷⣴⣿⣿⣶⣧⡀⠁⣻⣿⡟⣇⠉⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣤⡀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣦⣬⡉⠉⠉⠉⢻⣿⣶⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡏⠈⠙⠻⣶⣤⣀⡀⠀⠀⠙⣿⠙⠻⣿⣿⡿⢶⣴⣶⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⡇⠀⢀⠀⠉⠉⠛⠛⠶⢶⣾⣿⡶⣿⣿⣤⣤⣼⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣀⣀⣀⡀⠀⠀⠀⠀⠀⢸⣿⠀⠻⡀⢀⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⢻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣟⠉⠉⠙⠓⠲⢦⣄⣀⣈⣙⣳⣶⣤⣼⣃⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢻⡄⠀⠀⠀⠀⠀⠀⠉⠀⠀⠉⠙⠛⠛⣿⡿⠿⢷⣶⣦⣤⣤⣄⣀⡀⠀⢠⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢳⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠛⠿⣤⠀⠀⠉⠛⠻⢯⡙⠛⠛⠛⠁⠀⣀⣤⡤⠤⠤⢤⠴⠖⠒⠲⢤⡀⠀⠀⠀⠀
⠀⠀⠻⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⣄⣴⠶⠋⠉⠀⠀⠀⠁⠀⠀⠀⢰⡄⠀⢸⢶⣤⡀⠀
⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⢀⣀⣦⣄⣀⠀⠀⠀⠀⠸⠏⠀⠈⣿⣆
⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡾⠛⠉⠁⠈⠉⠉⠙⠛⠶⣆⠀⠀⠀⣿⢉
⠀⠀⠀⠀⠀⢹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣯⡏⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣤⣤⡽⠋
⠀⠀⠀⠀⠀⣸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀
⠀⠀⠀⠀⠀⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣯⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡾⠋⠁⠉⠙⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣸⣧⡄⠀⠀⠀⣀⣀⣀⣀⣀⠤⠤⠤⠾⠷⠶⠶⠟⠛⠉⢹⣄⠀⠀⠀⢰⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢰⡿⠋⣀⣼⢿⡛⠛⠋⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣆⣠⣴⡾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢼⡇⠀⠛⠷⠶⣧⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠘⣧⠀⠀⠀⠀⢠⣴⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠘⢷⣄⣠⣤⣴⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢀⢀⡄⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
`

type Loot struct {
	Exp   int
	Golds int
}

type Mob struct {
	Name        string
	Hp          *Character_stat
	Initiative  *Character_stat
	AttackValue int
	Loot        *Loot
}

func (m *Mob) GetInitiative() int {
	return m.Initiative.CurValue
}

func (m *Mob) GetName() string {
	return m.Name
}

// Deal damage to an enemy
func (m *Mob) TakeDamage(opponent Entity, damage int) {
	m.Hp.UpdateStat(-damage)
	if damage >= 0 {
		fmt.Printf("%s suffered %d damage from %s.\n", m.Name, damage, opponent.GetName())
		return
	}
	fmt.Printf("%s healed %d health from %s.\n", m.Name, -damage, opponent.GetName())
}

// Attack dammge of the enemy
func (m *Mob) Attack(target Entity, turn int) {
	attack_damage := m.AttackValue
	if turn%3 == 0 {
		attack_damage *= 2
	}
	target.TakeDamage(m, attack_damage)
}

// Set the turn of the monster
func (m *Mob) Turn(opponent Entity, turn int) {
	m.Attack(opponent, turn)
}

// Whenever the player leaves the fight, reset the hp
func (m *Mob) Reset() {
	m.Hp.UpdateStat(m.Hp.MaxValue)
}

// Parse the json file and put mobs in a global map
func InitMobs() {
	Mobs = make(map[string]*Mob, 0)

	filename := "../config/mobs.json"
	content, err := ioutil.ReadFile(filename)
	if err != nil {
		fmt.Println("Error parsing file", filename, err)
	}
	var payload map[string][]*Mob
	err = json.Unmarshal(content, &payload)
	if err != nil {
		fmt.Println("Error Unmarshal()", filename, err)
	}
	for _, mob := range payload["Mobs"] {
		Mobs[mob.Name] = mob
	}
}
